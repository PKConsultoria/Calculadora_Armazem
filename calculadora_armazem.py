import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

st.set_page_config(page_title="Calculadora Armaz√©m", page_icon="üè≠", layout="centered")

st.title("üè≠Calculadora de Receitas e Custos - Armaz√©m")

# ===============================
# Informa√ß√µes b√°sicas
# ===============================
st.header("‚ÑπÔ∏è Informa√ß√µes B√°sicas")

col1, col2, col3 = st.columns(3)
with col1:
    armazem = st.selectbox("Armaz√©m", ["Espinheiros", "Garuva"])
with col2:
    cliente = st.text_input("Cliente")
with col3:
    vendedor = st.text_input("Vendedor")

# ===============================
# Detalhes da opera√ß√£o
# ===============================
st.header("üèóÔ∏è Detalhes da Opera√ß√£o")

tipo_carga = st.selectbox("Tipo de Carga", ["Batida", "Palletizada"])
qtd_containers = st.number_input("Quantidade de Containers", min_value=0, step=1)
peso_por_container = st.number_input("Peso (toneladas) de 1 Container", min_value=0.0, step=0.1, format="%.2f")

produto_opcoes = [
    "01 - Animais vivos.",
    "02 - Carnes e miudezas, comest√≠veis.",
    "03 - Peixes e crust√°ceos, moluscos e outros invertebrados aqu√°ticos.",
    "04 - Leite e latic√≠nios; ovos de aves; mel natural; produtos comest√≠veis de origem animal, n√£o especificados nem compreendidos noutros Cap√≠tulos.",
    "05 - Outros produtos de origem animal, n√£o especificados nem compreendidos noutros Cap√≠tulos.",
    "06 - Plantas vivas e produtos de floricultura.",
    "07 - Produtos hort√≠colas, plantas, ra√≠zes e tub√©rculos, comest√≠veis.",
    "08 - Fruta; cascas de citros (citrinos) e de mel√µes.",
    "09 - Caf√©, ch√°, mate e especiarias.",
    "10 - Cereais.",
    "11 - Produtos da ind√∫stria de moagem; malte; amidos e f√©culas; inulina; gl√∫ten de trigo.",
    "12 - Sementes e frutos oleaginosos; gr√£os, sementes e frutos diversos; plantas industriais ou medicinais; palhas e forragens.",
    "13 - Gomas, resinas e outros sucos e extratos vegetais.",
    "14 - Mat√©rias para entran√ßar e outros produtos de origem vegetal, n√£o especificados nem compreendidos noutros Cap√≠tulos.",
    "15 - Gorduras e √≥leos animais, vegetais ou de origem microbiana e produtos da sua dissocia√ß√£o; gorduras aliment√≠cias elaboradas; ceras de origem animal ou vegetal.",
    "16 - Prepara√ß√µes de carne, peixes, crust√°ceos, moluscos, outros invertebrados aqu√°ticos ou de insetos.",
    "17 - A√ß√∫cares e produtos de confeitaria.",
    "18 - Cacau e suas prepara√ß√µes.",
    "19 - Prepara√ß√µes √† base de cereais, farinhas, amidos, f√©culas ou leite; produtos de pastelaria.",
    "20 - Prepara√ß√µes de produtos hort√≠colas, fruta ou de outras partes de plantas.",
    "21 - Prepara√ß√µes aliment√≠cias diversas.",
    "22 - Bebidas, l√≠quidos alco√≥licos e vinagres.",
    "23 - Res√≠duos e desperd√≠cios das ind√∫strias alimentares; alimentos preparados para animais.",
    "24 - Tabaco e seus suced√¢neos manufaturados; produtos, mesmo com nicotina, destinados √† inala√ß√£o sem combust√£o; outros produtos que contenham nicotina destinados √† absor√ß√£o da nicotina pelo corpo humano.",
    "25 - Sal; enxofre; terras e pedras; gesso, cal e cimento.",
    "26 - Min√©rios, esc√≥rias e cinzas.",
    "27 - Combust√≠veis minerais, √≥leos minerais e produtos da sua destila√ß√£o; mat√©rias betuminosas; ceras minerais.",
    "28 - Produtos qu√≠micos inorg√¢nicos; compostos inorg√¢nicos ou org√¢nicos de metais preciosos, de elementos radioativos, de metais das terras raras ou de is√≥topos.",
    "29 - Produtos qu√≠micos org√¢nicos.",
    "30 - Produtos farmac√™uticos.",
    "31 - Adubos (fertilizantes).",
    "32 - Extratos tanantes e tintoriais; taninos e seus derivados; pigmentos e outras mat√©rias corantes; tintas e vernizes; m√°stiques; tintas de escrever.",
    "33 - √ìleos essenciais e resinoides; produtos de perfumaria ou de toucador preparados e prepara√ß√µes cosm√©ticas.",
    "34 - Sab√µes, agentes org√¢nicos de superf√≠cie, prepara√ß√µes para lavagem, prepara√ß√µes lubrificantes, ceras artificiais, ceras preparadas, produtos de conserva√ß√£o e limpeza, velas e artigos semelhantes, massas ou pastas para modelar, \"ceras para odontologia\" e composi√ß√µes para odontologia √† base de gesso.",
    "35 - Mat√©rias albuminoides; produtos √† base de amidos ou de f√©culas modificados; colas; enzimas.",
    "36 - P√≥lvoras e explosivos; artigos de pirotecnia; f√≥sforos; ligas pirof√≥ricas; mat√©rias inflam√°veis.",
    "37 - Produtos para fotografia e cinematografia.",
    "38 - Produtos diversos das ind√∫strias qu√≠micas.",
    "39 - Pl√°stico e suas obras.",
    "40 - Borracha e suas obras.",
    "41 - Peles, exceto as peles com pelo, e couros.",
    "42 - Obras de couro; artigos de correeiro ou de seleiro; artigos de viagem, bolsas e artigos semelhantes; obras de tripa.",
    "43 - Peles com pelo e suas obras; peles com pelo artificiais.",
    "44 - Madeira, carv√£o vegetal e obras de madeira.",
    "45 - Corti√ßa e suas obras.",
    "46 - Obras de espartaria ou de cestaria.",
    "47 - Pastas de madeira ou de outras mat√©rias fibrosas celul√≥sicas; papel ou cart√£o para reciclar (desperd√≠cios e res√≠duos).",
    "48 - Papel e cart√£o; obras de pasta de celulose, papel ou de cart√£o.",
    "49 - Livros, jornais, gravuras e outros produtos das ind√∫strias gr√°ficas; textos manuscritos ou datilografados, planos e plantas.",
    "50 - Seda.",
    "51 - L√£, pelos finos ou grosseiros; fios e tecidos de crina.",
    "52 - Algod√£o.",
    "53 - Outras fibras t√™xteis vegetais; fios de papel e tecidos de fios de papel.",
    "54 - Filamentos sint√©ticos ou artificiais; l√¢minas e formas semelhantes de mat√©rias t√™xteis sint√©ticas ou artificiais.",
    "55 - Fibras sint√©ticas ou artificiais, descont√≠nuas.",
    "56 - Pastas (ouates), feltros e falsos tecidos (tecidos n√£o tecidos); fios especiais; cord√©is, cordas e cabos; artigos de cordoaria.",
    "57 - Tapetes e outros revestimentos para pisos (pavimentos), de mat√©rias t√™xteis.",
    "58 - Tecidos especiais; tecidos tufados; rendas; tape√ßarias; passamanarias; bordados.",
    "59 - Tecidos impregnados, revestidos, recobertos ou estratificados; artigos para usos t√©cnicos de mat√©rias t√™xteis.",
    "60 - Tecidos de malha.",
    "61 - Vestu√°rio e seus acess√≥rios, de malha.",
    "62 - Vestu√°rio e seus acess√≥rios, exceto de malha.",
    "63 - Outros artigos t√™xteis confeccionados; sortidos; artigos de mat√©rias t√™xteis e artigos de uso semelhante, usados; trapos.",
    "64 - Cal√ßado, polainas e artigos semelhantes; suas partes.",
    "65 - Chap√©us e artigos de uso semelhante, e suas partes.",
    "66 - Guarda-chuvas, sombrinhas, guarda-s√≥is, bengalas, bengalas-assentos, chicotes, pingalins, e suas partes.",
    "67 - Penas e penugem preparadas e suas obras; flores artificiais; obras de cabelo.",
    "68 - Obras de pedra, gesso, cimento, amianto, mica ou de mat√©rias semelhantes.",
    "69 - Produtos cer√¢micos.",
    "70 - Vidro e suas obras.",
    "71 - P√©rolas naturais ou cultivadas, pedras preciosas ou semipreciosas e semelhantes, metais preciosos, metais folheados ou chapeados de metais preciosos (plaqu√™), e suas obras; bijuterias; moedas.",
    "72 - Ferro fundido, ferro e a√ßo.",
    "73 - Obras de ferro fundido, ferro ou a√ßo.",
    "74 - Cobre e suas obras.",
    "75 - N√≠quel e suas obras.",
    "76 - Alum√≠nio e suas obras.",
    "78 - Chumbo e suas obras.",
    "79 - Zinco e suas obras.",
    "80 - Estanho e suas obras.",
    "81 - Outros metais comuns; cermets; obras dessas mat√©rias.",
    "82 - Ferramentas, artigos de cutelaria e talheres, e suas partes, de metais comuns.",
    "83 - Obras diversas de metais comuns.",
    "84 - Reatores nucleares, caldeiras, m√°quinas, aparelhos e instrumentos mec√¢nicos, e suas partes.",
    "85 - M√°quinas, aparelhos e materiais el√©tricos, e suas partes; aparelhos de grava√ß√£o ou de reprodu√ß√£o de som, aparelhos de grava√ß√£o ou de reprodu√ß√£o de imagens e de som em televis√£o, e suas partes e acess√≥rios.",
    "86 - Ve√≠culos e material para vias f√©rreas ou semelhantes, e suas partes; aparelhos mec√¢nicos (incluindo os eletromec√¢nicos) de sinaliza√ß√£o para vias de comunica√ß√£o.",
    "87 - Ve√≠culos autom√≥veis, tratores, ciclos e outros ve√≠culos terrestres, suas partes e acess√≥rios.",
    "88 - Aeronaves e aparelhos espaciais, e suas partes.",
    "89 - Embarca√ß√µes e estruturas flutuantes.",
    "90 - Instrumentos e aparelhos de √≥ptica, de fotografia, de cinematografia, de medida, de controle ou de precis√£o; instrumentos e aparelhos m√©dico-cir√∫rgicos; suas partes e acess√≥rios.",
    "91 - Artigos de relojoaria.",
    "92 - Instrumentos musicais; suas partes e acess√≥rios.",
    "93 - Armas e muni√ß√µes; suas partes e acess√≥rios.",
    "94 - M√≥veis; mobili√°rio m√©dico-cir√∫rgico; colch√µes, almofadas e semelhantes; lumin√°rias e aparelhos de ilumina√ß√£o n√£o especificados nem compreendidos noutros Cap√≠tulos; an√∫ncios, cartazes ou tabuletas e placas indicadoras, luminosos e artigos semelhantes; constru√ß√µes pr√©-fabricadas.",
    "95 - Brinquedos, jogos, artigos para divertimento ou para esporte; suas partes e acess√≥rios.",
    "96 - Obras diversas.",
    "97 - Objetos de arte, de cole√ß√£o e antiguidades."
]
produto = st.selectbox("Tipo de Produto", produto_opcoes)
valor_carga = st.number_input("Valor da Carga (R$)", min_value=0.0, step=100.0, format="%.2f")
embalagem = st.selectbox("Distribui√ß√£o da Carga", ["Palletizada", "Caixaria", "Sacaria", "Rolo", "Fardo", "Outros"])
if embalagem == "Palletizada":
    qtd_caixas = st.number_input("Quantidade de Pallets por Container", min_value=1, step=1)
if embalagem == "Caixaria":
    qtd_caixas = st.number_input("Quantidade de Caixas por Container", min_value=1, step=1)
if embalagem == "Sacaria":
    qtd_caixas = st.number_input("Quantidade de Sacos por Container", min_value=1, step=1)
if embalagem == "Rolo":
    qtd_caixas = st.number_input("Quantidade de Rolos por Container", min_value=1, step=1)
if embalagem == "Fardo":
    qtd_caixas = st.number_input("Quantidade de Fardos por Container", min_value=1, step=1)
elif embalagem == "Outros":
    qtd_rolos = st.number_input("Quantidade de Outros Produtos", min_value=1, step=1)

# ===============================
# Dimens√µes da Carga
# ===============================
st.header("üì¶ Dimens√µes da Carga")

col1, col2, col3, col4 = st.columns(4)
with col1:
    comprimento = st.number_input("Comprimento (m)", min_value=0.0, step=0.1, format="%.2f")
with col2:
    largura = st.number_input("Largura (m)", min_value=0.0, step=0.1, format="%.2f")
with col3:
    altura = st.number_input("Altura (m)", min_value=0.0, step=0.1, format="%.2f")
with col4:
    peso = st.number_input("Peso (kg)", min_value=0.0, step=0.1, format="%.2f")

# ===============================
# M√©tricas Adotadas
# ===============================
st.header("üìä M√©tricas Adotadas")

col1, col2, col3 = st.columns(3)

with col1:
    dias_trabalhados = st.number_input(
        "Dias Trabalhados", 
        min_value=0, 
        value=22,  # padr√£o
        step=1
    )
with col2:
    horas_trabalhadas_dia = st.number_input(
        "Horas Trabalhadas por Dia", 
        min_value=0.0, 
        value=8.8,  # padr√£o
        step=0.1, 
        format="%.2f"
    )
with col3:
    eficiencia = st.number_input(
        "Efici√™ncia (%)", 
        min_value=0, 
        max_value=100, 
        value=75,  # padr√£o
        step=1
    )


# ===============================
# Servi√ßos
# ===============================
st.header("üõ†Ô∏è Servi√ßos")

# tempo m√©dio de execu√ß√£o
tempos_execucao = {"Batida": 120, "Palletizada": 30}
tempo_exec = tempos_execucao[tipo_carga]

st.info(f"‚è±Ô∏è Tempo estimado de execu√ß√£o por opera√ß√£o: **{tempo_exec} minutos**")

# Servi√ßos por tipo de carga
servicos = {
    "Recebimento": {
        "Batida": ["Descarga Batida", "Etiquetagem Batida", "TFA"],
        "Palletizada": ["Descarga Palletizada", "Etiquetagem Palletizada", "TFA"]
    },
    "Expedi√ß√£o": {
        "Batida": ["Separa√ß√£o Batida", "Carregamento Batido", "Etiquetagem Batida"],
        "Palletizada": ["Separa√ß√£o Palletizada", "Carregamento Palletizado", "Etiquetagem Palletizada"]
    },
    "Armazenagem": ["Di√°ria", "Pico Quinzenal", "Pico Mensal"]
}

# Valores de cada servi√ßo
valores_servicos = {
    "Descarga Batida": 100.0,
    "Descarga Palletizada": 80.0,
    "Etiquetagem Batida": 0.50,
    "Etiquetagem Palletizada": 0.30,
    "TFA": 200.0,
    "Separa√ß√£o Batida": 1.20,
    "Separa√ß√£o Palletizada": 5.0,
    "Carregamento Batido": 90.0,
    "Carregamento Palletizado": 70.0,
    "Di√°ria": 2.0,
    "Pico Quinzenal": 500.0,
    "Pico Mensal": 900.0
}

st.subheader("Selecione os servi√ßos contratados:")

servicos_selecionados = []
custo_servicos = 0.0

discriminacao = []

# -----------------------------
# Recebimento
# -----------------------------
with st.expander("üì• Recebimento"):
    for nome in servicos["Recebimento"][tipo_carga]:
        if st.checkbox(nome, key=f"rec_{nome}"):
            servicos_selecionados.append(nome)
            
            if "Descarga" in nome:
                salario_conferente = 4186.13
                # Tempo por container em horas
                tempo_por_container_horas = tempo_exec / 60
                # Demanda em horas
                demanda_horas = tempo_por_container_horas * qtd_containers
                # HeadCount dispon√≠vel
                headcount = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                # Total horas disponibilizadas (1 HeadCount)
                total_horas_disponibilizadas = headcount
                # Taxa de ocupa√ß√£o
                taxa_ocupacao = demanda_horas / total_horas_disponibilizadas
                # Custo descarga
                custo_descarga_operacao = salario_conferente * taxa_ocupacao
                custo_servicos += custo_descarga_operacao

                # Adicionar √† discrimina√ß√£o
                discriminacao.append({
                    "Servi√ßo": nome,
                    "Qtd Containers": qtd_containers,
                    "Tempo/Container (h)": tempo_por_container_horas,
                    "Demanda (h)": demanda_horas,
                    "HeadCount (h dispon√≠vel)": headcount,
                    "Taxa Ocupa√ß√£o": taxa_ocupacao,
                    "Custo (R$)": custo_descarga_operacao
                })

            elif "Etiquetagem" in nome:
                custo_item = valores_servicos[nome] * qtd_caixas * qtd_containers
                custo_servicos += custo_item
                discriminacao.append({
                    "Servi√ßo": nome,
                    "Qtd Caixas": qtd_caixas,
                    "Qtd Containers": qtd_containers,
                    "Custo (R$)": custo_item
                })

            elif nome == "TFA":
                custo_servicos += valores_servicos[nome]
                discriminacao.append({
                    "Servi√ßo": nome,
                    "Custo (R$)": valores_servicos[nome]
                })

# -----------------------------
# Mostrar discrimina√ß√£o
# -----------------------------
if discriminacao:
    st.subheader("üìã Discrimina√ß√£o de Custos - Recebimento")
    df_discriminacao = pd.DataFrame(discriminacao)
    st.dataframe(df_discriminacao.style.format({"Custo (R$)": "R$ {:,.2f}"}))

# -----------------------------
# Expedi√ß√£o
# -----------------------------
with st.expander("üì¶ Expedi√ß√£o"):
    for nome in servicos["Expedi√ß√£o"][tipo_carga]:
        if st.checkbox(nome, key=f"exp_{nome}"):
            servicos_selecionados.append(nome)
            if "Separa√ß√£o" in nome or "Etiquetagem" in nome:
                custo_servicos += valores_servicos[nome] * qtd_caixas * qtd_containers
            elif "Carregamento" in nome:
                custo_servicos += valores_servicos[nome] * qtd_containers

# -----------------------------
# Armazenagem (sempre aparece)
# -----------------------------
with st.expander("üè¢ Armazenagem"):
    for nome in servicos["Armazenagem"]:
        if st.checkbox(nome, key=f"arm_{nome}"):
            servicos_selecionados.append(nome)
            if nome == "Di√°ria":
                dias = st.number_input("Dias de armazenagem", min_value=1, step=1, value=1)
                custo_servicos += valores_servicos[nome] * qtd_caixas * qtd_containers * dias
            else:
                custo_servicos += valores_servicos[nome]



# -----------------------------
# Custo total
# -----------------------------
st.metric("üí∞ Custo Total Servi√ßos", f"R$ {custo_servicos:,.2f}")

