import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# --- Bibliotecas para Exportar PDF ---
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib.enums import TA_CENTER
from reportlab.platypus.flowables import PageBreak
import pytz
from datetime import datetime

# --- Configura√ß√£o inicial da p√°gina ---
st.set_page_config(page_title="Calculadora Armaz√©m", page_icon="üè≠", layout="wide")

# --- T√≠tulo principal e subt√≠tulo ---
st.title("üè≠ Calculadora de Receitas e Custos - Armaz√©m")
st.markdown("Open Beta V0.3 - Vers√£o Corrigida")

# --- Barra Lateral para informa√ß√µes e m√©tricas ---
with st.sidebar:
    st.header("‚öôÔ∏è Configura√ß√µes Gerais")
    st.subheader("‚ÑπÔ∏è Informa√ß√µes B√°sicas")
    armazem = st.selectbox("Armaz√©m", ["Espinheiros", "Garuva"])
    cliente = st.text_input("Cliente", placeholder="Nome do Cliente")
    vendedor = st.text_input("Vendedor", placeholder="Nome do Vendedor")
    
    st.subheader("üìä M√©tricas Adotadas")
    dias_trabalhados = st.number_input("Dias Trabalhados", min_value=1, value=22, step=1)
    horas_trabalhadas_dia = st.number_input("Horas Trabalhadas por Dia", min_value=0.0, value=8.8, step=0.1, format="%.2f")
    eficiencia = st.number_input("Efici√™ncia (%)", min_value=0, max_value=100, value=75, step=1)
    
    st.subheader("üí∞ Estrat√©gia de Pre√ßo")
    custo_pbr = st.number_input("Custo PBR (R$)", min_value=0.0, value=1.32, step=0.01, format="%.2f")
    advalorem_percent = st.slider("Ad Valorem (%)", min_value=0.0, max_value=3.0, value=0.1, step=0.01, format="%.2f%%")
    markup_percent = st.slider("Markup (%)", min_value=0.0, max_value=100.0, value=30.0, step=0.5, format="%.1f%%")
    

# --- Container principal para o corpo da aplica√ß√£o ---
with st.container(border=True):
    st.header("üèóÔ∏è Detalhes da Opera√ß√£o")
    
    col1, col2 = st.columns(2)
    with col1:
        tipo_carga = st.selectbox("Tipo de Carga", ["Batida", "Palletizada"])
        qtd_pallets = st.number_input("Quantidade de Pallets por Container", min_value=0, value=30, step=1)
   
    with col2:
        qtd_containers = st.number_input("Quantidade de Containers", min_value=0, step=1)
        peso_por_container = st.number_input("Peso (toneladas) de 1 Container", min_value=0.0, step=0.1, format="%.2f")

    # --- Campo para embalagem e quantidade de caixas/outros ---
    embalagem = st.selectbox("Distribui√ß√£o da Carga", ["Palletizada", "Caixaria", "Sacaria", "Rolo", "Fardo", "Outros"])
    qtd_caixas_outros = 0
    if embalagem in ["Caixaria", "Sacaria", "Rolo", "Fardo", "Outros"]:
        label_map = {
            "Caixaria": "Quantidade de Caixas por Container",
            "Sacaria": "Quantidade de Sacos por Container",
            "Rolo": "Quantidade de Rolos por Container",
            "Fardo": "Quantidade de Fardos por Container",
            "Outros": "Quantidade de Outros Produtos por Container"
        }
        qtd_caixas_outros = st.number_input(label_map[embalagem], min_value=0, step=1)

    # Valida√ß√£o para garantir que a soma de pallets e caixas n√£o seja zero.
    if qtd_containers > 0 and qtd_pallets == 0 and qtd_caixas_outros == 0:
        st.warning("A soma da quantidade de pallets e caixas/outros por container deve ser maior que 0 para o c√°lculo.")

    # --- Detalhes adicionais da carga em um expansor ---
    with st.expander("‚ûï Outros Detalhes da Carga"):
        produto_opcoes = [
            "01 - Animais vivos.", "02 - Carnes e miudezas, comest√≠veis.", "03 - Peixes e crust√°ceos, moluscos e outros invertebrados aqu√°ticos.",
            "04 - Leite e latic√≠nios; ovos de aves; mel natural; produtos comest√≠veis de origem animal, n√£o especificados nem compreendidos noutros Cap√≠tulos.",
            "05 - Outros produtos de origem animal, n√£o especificados nem compreendidos noutros Cap√≠tulos.",
            "06 - Plantas vivas e produtos de floricultura.",
            "07 - Produtos hort√≠colas, plantas, ra√≠zes e tub√©rculos, comest√≠veis.",
            "08 - Fruta; cascas de citros (citrinos) e de mel√µes.",
            "09 - Caf√©, ch√°, mate e especiarias.",
            "10 - Cereais.",
            "11 - Produtos da ind√∫stria de moagem; malte; amidos e f√©culas; inulina; gl√∫ten de trigo.",
            "12 - Sementes e frutos oleaginosos; gr√£os, sementes e frutos diversos; plantas industriais ou medicinais; palhas e forragens.",
            "13 - Gomas, resinas e outros sucos e extratos vegetais.",
            "14 - Mat√©rias para entran√ßar e outros produtos de origem vegetal, n√£o especificados nem compreendidos noutros Cap√≠tulos.",
            "15 - Gorduras e √≥leos animais, vegetais ou de origem microbiana e produtos da sua dissocia√ß√£o; gorduras aliment√≠cias elaboradas; ceras de origem animal ou vegetal.",
            "16 - Prepara√ß√µes de carne, peixes, crust√°ceos, moluscos, outros invertebrados aqu√°ticos ou de insetos.",
            "17 - A√ß√∫cares e produtos de confeitaria.",
            "18 - Cacau e suas prepara√ß√µes.",
            "19 - Prepara√ß√µes √† base de cereais, farinhas, amidos, f√©culas ou leite; produtos de pastelaria.",
            "20 - Prepara√ß√µes de produtos hort√≠colas, fruta ou de outras partes de plantas.",
            "21 - Prepara√ß√µes aliment√≠cias diversas.",
            "22 - Bebidas, l√≠quidos alco√≥licos e vinagres.",
            "23 - Res√≠duos e desperd√≠cios das ind√∫strias alimentares; alimentos preparados para animais.",
            "24 - Tabaco e seus suced√¢neos manufaturados; produtos, mesmo com nicotina, destinados √† inala√ß√£o sem combust√£o; outros produtos que contenham nicotina destinados √† absor√ß√£o da nicotina pelo corpo humano.",
            "25 - Sal; enxofre; terras e pedras; gesso, cal e cimento.",
            "26 - Min√©rios, esc√≥rias e cinzas.",
            "27 - Combust√≠veis minerais, √≥leos minerais e produtos da sua destila√ß√£o; mat√©rias betuminosas; ceras minerais.",
            "28 - Produtos qu√≠micos inorg√¢nicos; compostos inorg√¢nicos ou org√¢nicos de metais preciosos, de elementos radioativos, de metais das terras raras ou de is√≥topos.",
            "29 - Produtos qu√≠micos org√¢nicos.",
            "30 - Produtos farmac√™uticos.",
            "31 - Adubos (fertilizantes).",
            "32 - Extratos tanantes e tintoriais; taninos e seus derivados; pigmentos e outras mat√©rias corantes; tintas e vernizes; m√°stiques; tintas de escrever.",
            "33 - √ìleos essenciais e resinoides; produtos de perfumaria ou de toucador preparados e prepara√ß√µes cosm√©ticas.",
            "34 - Sab√µes, agentes org√¢nicos de superf√≠cie, prepara√ß√µes para lavagem, prepara√ß√µes lubrificantes, ceras artificiais, ceras preparadas, produtos de conserva√ß√£o e limpeza, velas e artigos semelhantes, massas ou pastas para modelar, \"ceras para odontologia\" e composi√ß√µes para odontologia √† base de gesso.",
            "35 - Mat√©rias albuminoides; produtos √† base de amidos ou de f√©culas modificados; colas; enzimas.",
            "36 - P√≥lvoras e explosivos; artigos de pirotecnia; f√≥sforos; ligas pirof√≥ricas; mat√©rias inflam√°veis.",
            "37 - Produtos para fotografia e cinematografia.",
            "38 - Produtos diversos das ind√∫strias qu√≠micas.",
            "39 - Pl√°stico e suas obras.",
            "40 - Borracha e suas obras.",
            "41 - Peles, exceto as peles com pelo, e couros.",
            "42 - Obras de couro; artigos de correeiro ou de seleiro; artigos de viagem, bolsas e artigos semelhantes; obras de tripa.",
            "43 - Peles com pelo e suas obras; peles com pelo artificiais.",
            "44 - Madeira, carv√£o vegetal e obras de madeira.",
            "45 - Corti√ßa e suas obras.",
            "46 - Obras de espartaria ou de cestaria.",
            "47 - Pastas de madeira ou de outras mat√©rias celul√≥sicas; papel ou cart√£o para reciclar (desperd√≠cios e res√≠duos).",
            "48 - Papel e cart√£o; obras de pasta de celulose, papel ou de cart√£o.",
            "49 - Livros, jornais, gravuras e outros produtos das ind√∫strias gr√°ficas; textos manuscritos ou datilografados, planos e plantas.",
            "50 - Seda.",
            "51 - L√£, pelos finos ou grosseiros; fios e tecidos de crina.",
            "52 - Algod√£o.",
            "53 - Outras fibras t√™xteis vegetais; fios de papel e tecidos de fios de papel.",
            "54 - Filamentos sint√©ticos ou artificiais; l√¢minas e formas semelhantes de mat√©rias t√™xteis sint√©ticas ou artificiais.",
            "55 - Fibras sint√©ticas ou artificiais, descont√≠nuas.",
            "56 - Pastas (ouates), feltros e falsos tecidos (tecidos n√£o tecidos); fios especiais; cord√©is, cordas e cabos; artigos de cordoaria.",
            "57 - Tapetes e outros revestimentos para pisos (pavimentos), de mat√©rias t√™xteis.",
            "58 - Tecidos especiais; tecidos tufados; rendas; tape√ßarias; passamanarias; bordados.",
            "59 - Tecidos impregnados, revestidos, recobertos ou estratificados; artigos para usos t√©cnicos de mat√©rias t√™xteis.",
            "60 - Tecidos de malha.",
            "61 - Vestu√°rio e seus acess√≥rios, de malha.",
            "62 - Vestu√°rio e seus acess√≥rios, exceto de malha.",
            "63 - Outros artigos t√™xteis confeccionados; sortidos; artigos de mat√©rias t√™xteis e artigos de uso semelhante, usados; trapos.",
            "64 - Cal√ßado, polainas e artigos semelhantes; suas partes.",
            "65 - Chap√©us e artigos de uso semelhante, e suas partes.",
            "66 - Guarda-chuvas, sombrinhas, guarda-s√≥is, bengalas, bengalas-assentos, chicotes, pingalins, e suas partes.",
            "67 - Penas e penugem preparadas e suas obras; flores artificiais; obras de cabelo.",
            "68 - Obras de pedra, gesso, cimento, amianto, mica ou de mat√©rias semelhantes.",
            "69 - Produtos cer√¢micos.",
            "70 - Vidro e suas obras.",
            "71 - P√©rolas naturais ou cultivadas, pedras preciosas ou semipreciosas e semelhantes, metais preciosos, metais folheados ou chapeados de metais preciosos (plaqu√™), e suas obras; bijuterias; moedas.",
            "72 - Ferro fundido, ferro e a√ßo.",
            "73 - Obras de ferro fundido, ferro ou a√ßo.",
            "74 - Cobre e suas obras.",
            "75 - N√≠quel e suas obras.",
            "76 - Alum√≠nio e suas obras.",
            "78 - Chumbo e suas obras.",
            "79 - Zinco e suas obras.",
            "80 - Estanho e suas obras.",
            "81 - Outros metais comuns; cermets; obras dessas mat√©rias.",
            "82 - Ferramentas, artigos de cutelaria e talheres, e suas partes, de metais comuns.",
            "83 - Obras diversas de metais comuns.",
            "84 - Reatores nucleares, caldeiras, m√°quinas, aparelhos e instrumentos mec√¢nicos, e suas partes.",
            "85 - M√°quinas, aparelhos e materiais el√©tricos, e suas partes; aparelhos de grava√ß√£o ou de reprodu√ß√£o de som, aparelhos de grava√ß√£o ou de reprodu√ß√£o de imagens e de som em televis√£o, e suas partes e acess√≥rios.",
            "86 - Ve√≠culos e material para vias f√©rreas ou semelhantes, e suas partes; aparelhos mec√¢nicos (incluindo os eletromec√¢nicos) de sinaliza√ß√£o para vias de comunica√ß√£o.",
            "87 - Ve√≠culos autom√≥veis, tratores, ciclos e outros ve√≠culos terrestres, suas partes e acess√≥rios.",
            "88 - Aeronaves e aparelhos espaciais, e suas partes.",
            "89 - Embarca√ß√µes e estruturas flutuantes.",
            "90 - Instrumentos e aparelhos de √≥ptica, de fotografia, de cinematografia, de medida, de controle ou de precis√£o; instrumentos e aparelhos m√©dico-cir√∫rgicos; suas partes e acess√≥rios.",
            "91 - Artigos de relojoaria.",
            "92 - Instrumentos musicais; suas partes e acess√≥rios.",
            "93 - Armas e muni√ß√µes; suas partes e acess√≥rios.",
            "94 - M√≥veis; mobili√°rio m√©dico-cir√∫rgico; colch√µes, almofadas e semelhantes; lumin√°rias e aparelhos de ilumina√ß√£o n√£o especificados nem compreendidos noutros Cap√≠tulos; an√∫ncios, cartazes ou tabuletas e placas indicadoras, luminosos e artigos semelhantes; constru√ß√µes pr√©-fabricadas.",
            "95 - Brinquedos, jogos, artigos para divertimento ou para esporte; suas partes e acess√≥rios.",
            "96 - Obras diversas.",
            "97 - Objetos de arte, de cole√ß√£o e antiguidades."
        ]
        produto = st.selectbox("Tipo de Produto", produto_opcoes)
        # O st.number_input permanece o mesmo
        valor_carga = st.number_input("Valor da Carga (R$)", min_value=0.0, step=100.0, format="%.2f")

        st.subheader("üì¶ Dimens√µes da Carga")
        col_dim1, col_dim2, col_dim3, col_dim4 = st.columns(4)
        with col_dim1:
            comprimento = st.number_input("Comprimento (m)", min_value=0.0, step=0.1, format="%.2f")
        with col_dim2:
            largura = st.number_input("Largura (m)", min_value=0.0, step=0.1, format="%.2f")
        with col_dim3:
            altura = st.number_input("Altura (m)", min_value=0.0, step=0.1, format="%.2f")
        with col_dim4:
            peso = st.number_input("Peso (kg)", min_value=0.0, step=0.1, format="%.2f")


# --- Container de Servi√ßos ---
with st.container(border=True):
    st.header("üõ†Ô∏è Servi√ßos")
    
    # tempo m√©dio de execu√ß√£o
    tempos_execucao = {"Batida": 120, "Palletizada": 30}
    tempo_exec = tempos_execucao.get(tipo_carga, 0)
    st.info(f"‚è±Ô∏è Tempo estimado de execu√ß√£o por opera√ß√£o: **{tempo_exec} minutos**")
    
    # Valores de tempo para Descarga/Carregamento
    tempo_descarga_min = tempos_execucao.get(tipo_carga)
    tempo_carregamento_min = tempos_execucao.get(tipo_carga)
    
    # Servi√ßos por tipo de carga
    servicos = {
        "Recebimento": {
            # REMO√á√ÉO DO STRETCH PARA PALLETIZADA
            "Batida": ["Descarga Batida", "Etiquetagem Batida", "TFA", "Stretch"],
            "Palletizada": ["Descarga Palletizada", "Etiquetagem Palletizada", "TFA"]
        },
        "Expedi√ß√£o": {
            "Batida": ["Separa√ß√£o Batida", "Carregamento Batido", "Etiquetagem Batida"],
            "Palletizada": ["Separa√ß√£o Palletizada", "Carregamento Palletizado", "Etiquetagem Palletizada"]
        },
        "Armazenagem": ["Di√°ria", "Pico Quinzenal", "Pico Mensal"]
    }
    
    # Valores de cada servi√ßo (n√£o alterados)
    valores_servicos = {
        "Descarga Batida": 100.0,
        "Descarga Palletizada": 80.0,
        "Etiquetagem Batida": 0.50,
        "Etiquetagem Palletizada": 0.30,
        "TFA": 200.0,
        "Separa√ß√£o Batida": 1.20,
        "Separa√ß√£o Palletizada": 5.0,
        "Carregamento Batido": 90.0,
        "Carregamento Palletizado": 70.0,
        "Di√°ria": 0.0,
        "Pico Quinzenal": 0.0,
        "Pico Mensal": 0.0
    }
    
    servicos_selecionados = []
    custos_por_servico = {}
    discriminacao = []
    custo_servicos = 0.0
    receita_total = 0.0 # Inicializa a vari√°vel de receita total

    # --- Expansores para cada tipo de servi√ßo ---
    with st.expander("üì• Recebimento"):
        for nome in servicos["Recebimento"][tipo_carga]:
            if st.checkbox(nome, key=f"rec_{nome}"):
                servicos_selecionados.append(nome)
                
                # -----------------------------
                # Descarga
                # -----------------------------
                if "Descarga" in nome:
                    
                    # Fun√ß√µes base com tempo para carga Batida (120 min) ou tempos menores
                    funcoes_base = [
                        {"nome": "Conferente", "salario": 4052.17, "tempo": 120}, 
                        {"nome": "Analista", "salario": 4780.41, "tempo": 10},
                        {"nome": "Supervisor", "salario": 6775.58, "tempo": 45},
                        {"nome": "M√£o de Obra de Terceiros", "salario": 330, "tempo": 120},
                        {"nome": "M√°quina El√©trica", "salario": 47.6, "tempo": 120},
                    ]
                    
                    funcoes = []
                    
                    # CORRE√á√ÉO: L√≥gica para filtrar M√£o de Obra de Terceiros e ajustar tempo para 30 minutos
                    for func in funcoes_base:
                        if tipo_carga == "Palletizada":
                            # 1. REMOVE APENAS 'M√£o de Obra de Terceiros'
                            if func["nome"] == "M√£o de Obra de Terceiros":
                                continue
                            
                            # 2. AJUSTA TEMPO para 30 min (se o tempo base for 120)
                            novo_tempo = func["tempo"] if func["tempo"] != 120 else 30
                            funcoes.append({**func, "tempo": novo_tempo})
                            
                        else: # Batida (120 min)
                            # 1. MANT√âM TODOS
                            # 2. TEMPO permanece 120 min (ou o tempo original)
                            funcoes.append(func)
                    
                    unidades_totais = qtd_pallets + qtd_caixas_outros
                    
                    for func in funcoes:
                        tempo_horas_total = 0
                        custo = 0
                        
                        headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                        
                        if func["nome"] == "M√£o de Obra de Terceiros":
                            # O custo de M√£o de Obra de Terceiros √© um custo fixo por container
                            custo = func["salario"] * qtd_containers
                        elif func["nome"] == "M√°quina El√©trica":
                            # Custo da M√°quina por hora efetiva
                            tempo_horas = func["tempo"] / 60
                            demanda_horas = tempo_horas * qtd_containers
                            headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                            # CORRE√á√ÉO: Custo da m√°quina √© rateado pela taxa de ocupa√ß√£o do recurso no m√™s
                            taxa_ocupacao = (demanda_horas / headcount_val) if headcount_val > 0 else 0
                            custo = func["salario"] * taxa_ocupacao * demanda_horas # Corre√ß√£o na f√≥rmula de custo da m√°quina
                        else: # M√£o de obra (Conferente, Analista, Supervisor)
                            tempo_por_container_h = func["tempo"] / 60
                            tempo_horas_total = tempo_por_container_h * qtd_containers
                            taxa_ocupacao = (tempo_horas_total / headcount_val) if headcount_val > 0 else 0
                            # Custo da M√£o de Obra √© o sal√°rio rateado pela taxa de ocupa√ß√£o do recurso no m√™s
                            custo = func["salario"] * taxa_ocupacao

                        custo_servicos += custo
                        if nome not in custos_por_servico:
                             custos_por_servico[nome] = 0
                        custos_por_servico[nome] += custo
                        discriminacao.append({
                            "Servi√ßo": nome, "Fun√ß√£o": func["nome"], "Custo (R$)": custo,
                            "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                            "Tempo/Container (h)": func["tempo"] / 60 if func["tempo"] > 0 else 0,
                            "Demanda (h)": tempo_horas_total if tempo_horas_total > 0 or func["nome"] not in ["M√£o de Obra de Terceiros", "M√°quina El√©trica"] else (func["tempo"] / 60) * qtd_containers if func["nome"] == "M√°quina El√©trica" else 0,
                            "HeadCount (h dispon√≠vel)": headcount_val if headcount_val > 0 and func["nome"] not in ["M√£o de Obra de Terceiros"] else 0,
                            "Taxa Ocupa√ß√£o": taxa_ocupacao if 'taxa_ocupacao' in locals() and func["nome"] not in ["M√£o de Obra de Terceiros"] else 0
                        })
                
                # -----------------------------
                # Etiquetagem e Custo de Etiqueta (CORRE√á√ÉO DE CATEGORIA)
                # -----------------------------
                elif "Etiquetagem" in nome:
                    unidades_para_etiquetagem = qtd_pallets + qtd_caixas_outros

                    # NOVO: Diferencia√ß√£o do nome do servi√ßo para Recebimento
                    nome_rec = f"{nome} (Recebimento)"
                    
                    # Custo do Assistente de Etiquetagem
                    tempo_pallet_h = 1 / 3600
                    salario_assistente = 3713.31
                    tempo_por_unidade_h = 1 / 3600
                    demanda_horas = tempo_pallet_h * qtd_containers * qtd_pallets
                    headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                    taxa_ocupacao = (demanda_horas / headcount_val) if headcount_val > 0 else 0
                    custo_assistente = salario_assistente * taxa_ocupacao * demanda_horas

                    custo_servicos += custo_assistente
                    if nome_rec not in custos_por_servico:
                         custos_por_servico[nome_rec] = 0
                    custos_por_servico[nome_rec] += custo_assistente
                    discriminacao.append({
                        "Servi√ßo": nome_rec, # USANDO NOME DIFERENCIADO
                        "Fun√ß√£o": "Assistente", "Custo (R$)": custo_assistente,
                        "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                        "Tempo/Container (h)": tempo_por_unidade_h * unidades_para_etiquetagem, "Demanda (h)": demanda_horas,
                        "HeadCount (h dispon√≠vel)": headcount_val, "Taxa Ocupa√ß√£o": taxa_ocupacao
                    })

                    # Custo da Etiqueta
                    custo_etiqueta_unitario = 0.06
                    custo_etiquetas = custo_etiqueta_unitario * qtd_containers * qtd_pallets
                    custo_servicos += custo_etiquetas
                    if nome_rec not in custos_por_servico:
                         custos_por_servico[nome_rec] = 0
                    custos_por_servico[nome_rec] += custo_etiquetas
                    discriminacao.append({
                        "Servi√ßo": nome_rec, # USANDO NOME DIFERENCIADO
                        "Fun√ß√£o": "Etiqueta", "Custo (R$)": custo_etiquetas,
                        "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                        "Tempo/Container (h)": 0, "Demanda (h)": 0, "HeadCount (h dispon√≠vel)": 0, "Taxa Ocupa√ß√£o": 0
                    })

                # -----------------------------
                # TFA (sem altera√ß√£o)
                # -----------------------------
                elif nome == "TFA":
                    salario_conferente_tfa = 4052.17
                    tempo_conferente_tfa_min = 120
                    tempo_conferente_tfa_h = tempo_conferente_tfa_min / 60
                    demanda_horas_tfa = tempo_conferente_tfa_h * qtd_containers
                    headcount_tfa_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                    taxa_ocupacao_tfa = (demanda_horas_tfa / headcount_tfa_val) if headcount_tfa_val > 0 else 0
                    custo_conferente_tfa = salario_conferente_tfa * taxa_ocupacao_tfa

                    custo_servicos += custo_conferente_tfa
                    if nome not in custos_por_servico:
                         custos_por_servico[nome] = 0
                    custos_por_servico[nome] += custo_conferente_tfa
                    discriminacao.append({
                        "Servi√ßo": nome, "Fun√ß√£o": "Conferente", "Custo (R$)": custo_conferente_tfa,
                        "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                        "Tempo/Container (h)": tempo_conferente_tfa_h, "Demanda (h)": demanda_horas_tfa,
                        "HeadCount (h dispon√≠vel)": headcount_tfa_val, "Taxa Ocupa√ß√£o": taxa_ocupacao_tfa
                    })
                
                # -----------------------------
                # Stretch (agora s√≥ aparece para Batida)
                # -----------------------------
                elif nome == "Stretch":
                    custo_unitario_stretch = 6.85
                    custo_total_stretch = custo_unitario_stretch * qtd_pallets * qtd_containers

                    custo_servicos += custo_total_stretch
                    if nome not in custos_por_servico:
                        custos_por_servico[nome] = 0
                    custos_por_servico[nome] += custo_total_stretch
                    discriminacao.append({
                        "Servi√ßo": nome, "Fun√ß√£o": "Material", "Custo (R$)": custo_total_stretch,
                        "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                        "Tempo/Container (h)": 0, "Demanda (h)": 0, "HeadCount (h dispon√≠vel)": 0, "Taxa Ocupa√ß√£o": 0
                    })


    with st.expander("üì¶ Expedi√ß√£o"):
        for nome in servicos["Expedi√ß√£o"][tipo_carga]:
            if st.checkbox(nome, key=f"exp_{nome}"):
                servicos_selecionados.append(nome)
                
                # --- Separa√ß√£o (sem altera√ß√£o) ---
                if "Separa√ß√£o" in nome:
                    funcoes_separacao = [
                        {"nome": "Conferente", "salario": 4052.17, "tempo": 10}, # 10s
                        {"nome": "M√°quina El√©trica", "salario": 47.6, "tempo": 10} # 10s
                    ]
                    unidades_demanda = qtd_containers * qtd_caixas_outros
                    
                    for func in funcoes_separacao:
                        custo = 0.0
                        taxa_ocupacao = 0.0
                        demanda_horas = 0.0
                        
                        headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)

                        demanda_horas = (func["tempo"] / 3600) * unidades_demanda
                        taxa_ocupacao = (demanda_horas / headcount_val) if headcount_val > 0 else 0
                        
                        if func["nome"] == "M√°quina El√©trica":
                            # CORRE√á√ÉO: Custo da m√°quina √© rateado pela taxa de ocupa√ß√£o do recurso no m√™s
                            custo = func["salario"] * taxa_ocupacao * demanda_horas # Corre√ß√£o na f√≥rmula de custo da m√°quina
                        else: # M√£o de obra
                            custo = func["salario"] * taxa_ocupacao
                        
                        custo_servicos += custo
                        if nome not in custos_por_servico:
                            custos_por_servico[nome] = 0
                        custos_por_servico[nome] += custo
                        discriminacao.append({
                            "Servi√ßo": nome, "Fun√ß√£o": func["nome"], "Custo (R$)": custo,
                            "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                            "Tempo/Container (h)": func["tempo"] / 3600, "Demanda (h)": demanda_horas,
                            "HeadCount (h dispon√≠vel)": headcount_val, "Taxa Ocupa√ß√£o": taxa_ocupacao
                        })
                
                # --- Carregamento ---
                elif "Carregamento" in nome:
                    
                    # Fun√ß√µes base com tempo para carga Batida (120 min) ou tempos menores
                    funcoes_carregamento_base = [
                        {"nome": "Conferente", "salario": 4052.17, "tempo": 120}, 
                        {"nome": "Analista", "salario": 4780.41, "tempo": 10},
                        {"nome": "Coordenador", "salario": 7774.15, "tempo": 45},
                        {"nome": "M√£o de Obra de Terceiros", "salario": 330, "tempo": 120},
                        {"nome": "M√°quina GLP", "salario": 64.72, "tempo": 120},
                    ]
                    
                    funcoes_carregamento = []
                    
                    # CORRE√á√ÉO: L√≥gica para filtrar M√£o de Obra de Terceiros e ajustar tempo para 30 minutos
                    for func in funcoes_carregamento_base:
                        if tipo_carga == "Palletizada":
                            # 1. REMOVE APENAS 'M√£o de Obra de Terceiros'
                            if func["nome"] == "M√£o de Obra de Terceiros":
                                continue
                            
                            # 2. AJUSTA TEMPO para 30 min (se o tempo base for 120)
                            novo_tempo = func["tempo"] if func["tempo"] != 120 else 30
                            funcoes_carregamento.append({**func, "tempo": novo_tempo})
                            
                        else: # Batida (120 min)
                            # 1. MANT√âM TODOS
                            # 2. TEMPO permanece 120 min (ou o tempo original)
                            funcoes_carregamento.append(func)
                    
                    headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                    
                    for func in funcoes_carregamento:
                        custo = 0.0
                        tempo_horas_total = 0
                        taxa_ocupacao = 0
                        
                        if func["nome"] == "M√£o de Obra de Terceiros":
                            custo = func["salario"] * qtd_containers
                        elif func["nome"] == "M√°quina GLP":
                            tempo_horas = func["tempo"] / 60
                            demanda_horas = tempo_horas * qtd_containers
                            taxa_ocupacao = (demanda_horas / headcount_val) if headcount_val > 0 else 0
                            # CORRE√á√ÉO: Custo da m√°quina √© rateado pela taxa de ocupa√ß√£o do recurso no m√™s
                            custo = func["salario"] * taxa_ocupacao * demanda_horas # Corre√ß√£o na f√≥rmula de custo da m√°quina
                        else: # M√£o de obra
                            tempo_por_container_h = func["tempo"] / 60
                            tempo_horas_total = tempo_por_container_h * qtd_containers
                            taxa_ocupacao = (tempo_horas_total / headcount_val) if headcount_val > 0 else 0
                            custo = func["salario"] * taxa_ocupacao
                        
                        custo_servicos += custo
                        if nome not in custos_por_servico:
                             custos_por_servico[nome] = 0
                        custos_por_servico[nome] += custo
                        discriminacao.append({
                            "Servi√ßo": nome, "Fun√ß√£o": func["nome"], "Custo (R$)": custo,
                            "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                            "Tempo/Container (h)": func["tempo"] / 60 if func["tempo"] > 0 else 0,
                            "Demanda (h)": tempo_horas_total if tempo_horas_total > 0 or func["nome"] not in ["M√£o de Obra de Terceiros", "M√°quina GLP"] else (func["tempo"] / 60) * qtd_containers if func["nome"] == "M√°quina GLP" else 0,
                            "HeadCount (h dispon√≠vel)": headcount_val if headcount_val > 0 and func["nome"] not in ["M√£o de Obra de Terceiros"] else 0,
                            "Taxa Ocupa√ß√£o": taxa_ocupacao if 'taxa_ocupacao' in locals() and func["nome"] not in ["M√£o de Obra de Terceiros"] else 0
                        })
                
                # --- Etiquetagem de Expedi√ß√£o (CORRE√á√ÉO DE CATEGORIA) ---
                elif "Etiquetagem" in nome:
                    
                    # NOVO: Diferencia√ß√£o do nome do servi√ßo para Expedi√ß√£o
                    nome_exp = f"{nome} (Expedi√ß√£o)"
                    
                    salario_assistente = 3713.31
                    unidades_para_etiquetagem_exp = qtd_caixas_outros if tipo_carga == "Batida" else qtd_pallets
                    tempo_por_unidade_h = 1 / 3600
                    demanda_horas = tempo_por_unidade_h * unidades_para_etiquetagem_exp * qtd_containers
                    headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)
                    taxa_ocupacao = (demanda_horas / headcount_val) if headcount_val > 0 else 0
                    custo_assistente = salario_assistente * taxa_ocupacao * demanda_horas
                    
                    custo_servicos += custo_assistente
                    if nome_exp not in custos_por_servico:
                         custos_por_servico[nome_exp] = 0
                    custos_por_servico[nome_exp] += custo_assistente
                    discriminacao.append({
                        "Servi√ßo": nome_exp, # USANDO NOME DIFERENCIADO
                        "Fun√ß√£o": "Assistente", "Custo (R$)": custo_assistente,
                        "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                        "Tempo/Container (h)": tempo_por_unidade_h * unidades_para_etiquetagem_exp, "Demanda (h)": demanda_horas,
                        "HeadCount (h dispon√≠vel)": headcount_val, "Taxa Ocupa√ß√£o": taxa_ocupacao
                    })

                    # Custo da Etiqueta
                    custo_etiqueta_unitario = 0.06
                    custo_etiquetas = custo_etiqueta_unitario * qtd_containers * qtd_caixas_outros
                    custo_servicos += custo_etiquetas
                    if nome_exp not in custos_por_servico:
                         custos_por_servico[nome_exp] = 0
                    custos_por_servico[nome_exp] += custo_etiquetas
                    discriminacao.append({
                        "Servi√ßo": nome_exp, # USANDO NOME DIFERENCIADO
                        "Fun√ß√£o": "Etiqueta", "Custo (R$)": custo_etiquetas,
                        "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                        "Tempo/Container (h)": 0, "Demanda (h)": 0, "HeadCount (h dispon√≠vel)": 0, "Taxa Ocupa√ß√£o": 0
                    })
    
    with st.expander("üè¢ Armazenagem"):
        for nome in servicos["Armazenagem"]:
            if st.checkbox(nome, key=f"arm_{nome}"):
                servicos_selecionados.append(nome)
                custo = custo_pbr * 30 * qtd_pallets * qtd_containers
                custo_servicos += custo
                if nome not in custos_por_servico:
                     custos_por_servico[nome] = 0
                custos_por_servico[nome] += custo
                discriminacao.append({
                    "Servi√ßo": nome, "Fun√ß√£o": "Armazenagem", "Custo (R$)": custo,
                    "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                    "Tempo/Container (h)": 0, "Demanda (h)": 0, "HeadCount (h dispon√≠vel)": 0, "Taxa Ocupa√ß√£o": 0
                })

        # NOVO C√ìDIGO: Adicionando a receita de Ad Valorem
        if st.checkbox("Ad Valorem", key="arm_advalorem"):
            servicos_selecionados.append("Ad Valorem")
            receita_ad_valorem = (advalorem_percent / 100) * valor_carga * qtd_containers
            receita_total += receita_ad_valorem
            
            # Adicionando a receita como uma entrada negativa para o gr√°fico de custos
            custos_por_servico["Ad Valorem (Receita)"] = -receita_ad_valorem

            discriminacao.append({
                "Servi√ßo": "Ad Valorem", "Fun√ß√£o": "Receita", "Custo (R$)": 0.0,
                "Qtd Containers": qtd_containers, "Qtd Pallets": qtd_pallets, "Qtd Caixas/Outros": qtd_caixas_outros,
                "Tempo/Container (h)": 0, "Demanda (h)": 0, "HeadCount (h dispon√≠vel)": 0, "Taxa Ocupa√ß√£o": 0
            })


# --- Painel de Resultados (apenas se houver servi√ßos selecionados) ---
if servicos_selecionados:
    st.markdown("---")
    st.header("üìà Resumo dos Resultados")
    
    col_metricas, col_grafico = st.columns([1, 1.5])

    markup_decimal = markup_percent / 100
    # A receita total agora √© a soma do custo com markup + a receita de Ad Valorem
    receita_total += custo_servicos * (1 + markup_decimal)
    lucro_total = receita_total - custo_servicos

    with col_metricas:
        st.metric("üí∞ **Custo Total dos Servi√ßos**", f"R$ {custo_servicos:,.2f}")
        
        st.metric("üí≤ **Receita Total (com markup)**", f"R$ {receita_total:,.2f}")
        st.metric("üìä **Lucro Bruto**", f"R$ {lucro_total:,.2f}")

        total_containers = qtd_containers
        total_pallets = qtd_containers * qtd_pallets
        total_caixas_outros = qtd_containers * qtd_caixas_outros

        st.markdown("---")
        st.subheader("Totais da Opera√ß√£o")
    
        st.metric("üßä **Total de Containers**", f"{total_containers:,.0f}")
        if total_pallets > 0:
            st.metric("üß± **Total de Pallets**", f"{total_pallets:,.0f}")
        if total_caixas_outros > 0:
            st.metric(f"üõçÔ∏è **Total de {embalagem}**", f"{total_caixas_outros:,.0f}")
        

    with col_grafico:
        st.subheader("Distribui√ß√£o de Custos")
        df_custos = pd.DataFrame(list(custos_por_servico.items()), columns=['Servi√ßo', 'Custo'])
        if not df_custos.empty:
            # Filtra apenas os custos positivos para o gr√°fico de pizza
            df_custos_final = df_custos[df_custos['Custo'] > 0]
            if not df_custos_final.empty:
                fig, ax = plt.subplots(figsize=(2, 2))
                ax.pie(df_custos_final['Custo'], labels=df_custos_final['Servi√ßo'], autopct='%1.1f%%', startangle=90, textprops={'fontsize': 9})
                ax.axis('equal') # Garante que o gr√°fico de pizza seja um c√≠rculo.
                st.pyplot(fig)
            else:
                st.info("Nenhum servi√ßo com custo selecionado para o gr√°fico de pizza.")
        else:
            st.info("Nenhum servi√ßo selecionado para calcular a distribui√ß√£o de custos.")

    # --- Tabela de discrimina√ß√£o detalhada ---
    with st.expander("üìã Ver Discrimina√ß√£o Detalhada dos Custos e Receitas"):
        if discriminacao:
            df_discriminacao = pd.DataFrame(discriminacao)
            df_discriminacao = df_discriminacao.fillna(0)
            df_discriminacao.index += 1
            
            # Dicion√°rio de mapeamento Categoria-Servi√ßo
            categoria_map = {}
            for categoria, tipos in servicos.items():
                if isinstance(tipos, dict):
                    # Para Recebimento e Expedi√ß√£o, que t√™m subtipos por tipo_carga
                    for sub_servico in tipos[tipo_carga]:
                        # Se o servi√ßo for "Etiquetagem", ele ser√° tratado manualmente abaixo
                        if "Etiquetagem" not in sub_servico:
                            categoria_map[sub_servico] = categoria # Mapeia os servi√ßos √∫nicos (Descarga, TFA, Separa√ß√£o, Carregamento, Stretch)
                elif isinstance(tipos, list):
                    # Para Armazenagem
                    for sub_servico in tipos:
                        categoria_map[sub_servico] = categoria
            
            # CORRE√á√ÉO: Mapeamento manual para os servi√ßos de Etiquetagem para evitar sobrescrita
            # Os servi√ßos de Etiquetagem agora t√™m "(Recebimento)" ou "(Expedi√ß√£o)" no nome na tabela 'discriminacao'
            if tipo_carga == "Batida":
                categoria_map["Etiquetagem Batida R"] = "Recebimento"
                categoria_map["Etiquetagem Batida E"] = "Expedi√ß√£o"
            elif tipo_carga == "Palletizada":
                categoria_map["Etiquetagem Palletizada R"] = "Recebimento"
                categoria_map["Etiquetagem Palletizada E"] = "Expedi√ß√£o"
            
            # Adiciona Ad Valorem (que √© um servi√ßo de receita)
            categoria_map["Ad Valorem"] = "Armazenagem"
            # Adiciona a nova coluna 'Categoria'
            df_discriminacao['Categoria'] = df_discriminacao['Servi√ßo'].map(categoria_map)
            
            # NOVO C√ìDIGO: Calcula a receita para cada item da discrimina√ß√£o, incluindo Ad Valorem
            def calcular_receita(row):
                if row['Servi√ßo'] == 'Ad Valorem':
                    return (advalorem_percent / 100) * valor_carga * qtd_containers
                else:
                    # Verifica se √© um custo (Custo > 0) para aplicar o markup. Se for Ad Valorem (Custo=0.0), retorna o custo * (1+markup) que √© 0
                    return row['Custo (R$)'] * (1 + markup_decimal)
            
            df_discriminacao['Receita (R$)'] = df_discriminacao.apply(calcular_receita, axis=1)

            # ATUALIZADO: Inclui a coluna 'Categoria'
            df_discriminacao = df_discriminacao[[
                "Categoria", "Servi√ßo", "Fun√ß√£o", "Qtd Containers", "Qtd Pallets", "Qtd Caixas/Outros",
                "Demanda (h)", "HeadCount (h dispon√≠vel)", "Taxa Ocupa√ß√£o", "Custo (R$)", "Receita (R$)"
            ]]
            
            st.dataframe(df_discriminacao.style.format({
                "Demanda (h)": "{:.2f}",
                "HeadCount (h dispon√≠vel)": "{:.2f}",
                "Taxa Ocupa√ß√£o": "{:.2f}",
                "Custo (R$)": "R$ {:,.2f}",
                "Receita (R$)": "R$ {:,.2f}",
                "Qtd Containers": "{:.0f}",
                "Qtd Pallets": "{:.0f}",
                "Qtd Caixas/Outros": "{:.0f}"
            }))
        else:
            st.info("Nenhuma discrimina√ß√£o de custos e receitas dispon√≠vel.")
            
    # --- Exportar para PDF ---
    with st.container(border=True):
        st.subheader("üì• Exportar Relat√≥rio")
        st.markdown("Clique no bot√£o abaixo para baixar o seu relat√≥rio em formato PDF, com todos os detalhes e m√©tricas calculados.")
        
        buffer = BytesIO()

        # Documento PDF
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        elementos = []
        styles = getSampleStyleSheet()
        styles.add(ParagraphStyle(name='Heading3Bold', fontName='Helvetica-Bold', fontSize=14, leading=16))
        styles.add(ParagraphStyle(name='NormalBold', fontName='Helvetica-Bold', fontSize=10))

        # T√≠tulo do Relat√≥rio
        elementos.append(Paragraph("Relat√≥rio - Calculadora Armaz√©m", styles['Title']))
        elementos.append(Spacer(1, 18))

        # Se√ß√£o de Informa√ß√µes B√°sicas
        elementos.append(Paragraph("<b>Informa√ß√µes da Opera√ß√£o:</b>", styles['Heading2']))
        elementos.append(Spacer(1, 6))
        elementos.append(Paragraph(f"<b>Armaz√©m:</b> {armazem}", styles['Normal']))
        elementos.append(Paragraph(f"<b>Cliente:</b> {cliente}", styles['Normal']))
        elementos.append(Paragraph(f"<b>Vendedor:</b> {vendedor}", styles['Normal']))
        elementos.append(Paragraph(f"<b>Tipo de Produto:</b> {produto}", styles['Normal']))
        elementos.append(Paragraph(f"<b>Peso por Container:</b> {peso_por_container:,.2f} toneladas", styles['Normal']))
        elementos.append(Paragraph(f"<b>Valor da Carga:</b> R$ {valor_carga:,.2f}", styles['Normal']))
        elementos.append(Spacer(1, 12))

        # Se√ß√£o de M√©tricas Principais
        elementos.append(Paragraph("<b>M√©tricas Financeiras:</b>", styles['Heading2']))
        elementos.append(Spacer(1, 6))
        elementos.append(Paragraph(f"<b>Custo Total:</b> R$ {custo_servicos:,.2f}", styles['Normal']))
        elementos.append(Paragraph(f"<b>Receita Total:</b> R$ {receita_total:,.2f}", styles['Normal']))
        elementos.append(Paragraph(f"<b>Lucro Bruto:</b> R$ {lucro_total:,.2f}", styles['Normal']))
        elementos.append(Spacer(1, 12))

        # Se√ß√£o de Totais da Opera√ß√£o
        elementos.append(Paragraph("<b>Totais da Opera√ß√£o:</b>", styles['Heading2']))
        elementos.append(Spacer(1, 6))
        elementos.append(Paragraph(f"Containers: {total_containers:,.0f}", styles['Normal']))
        if total_pallets > 0:
            elementos.append(Paragraph(f"Pallets: {total_pallets:,.0f}", styles['Normal']))
        if total_caixas_outros > 0:
            elementos.append(Paragraph(f"{embalagem}: {total_caixas_outros:,.0f}", styles['Normal']))
        elementos.append(Spacer(1, 12))

        # Se√ß√£o de Discrimina√ß√£o Detalhada
        elementos.append(Paragraph("<b>Discrimina√ß√£o de Custos e Receitas por Servi√ßo:</b>", styles['Heading2']))
        elementos.append(Spacer(1, 6))

        if 'df_discriminacao' in locals() and not df_discriminacao.empty:
            # Formata os dados para a tabela
            df_formatado = df_discriminacao.copy()

            # ATUALIZADO: Inclui a coluna 'Categoria'
            cols_to_display = ["Categoria", "Servi√ßo", "Fun√ß√£o", "Demanda (h)", "Custo (R$)", "Receita (R$)"]
            
            # CORRE√á√ÉO: Cria uma c√≥pia expl√≠cita do DataFrame para evitar o SettingWithCopyWarning
            df_display = df_formatado[cols_to_display].copy()

            # Formata as colunas para strings
            df_display["Demanda (h)"] = df_display["Demanda (h)"].apply(lambda x: f"{x:.2f}")
            df_display["Custo (R$)"] = df_display["Custo (R$)"].apply(lambda x: f"R$ {x:,.2f}")
            df_display["Receita (R$)"] = df_display["Receita (R$)"].apply(lambda x: f"R$ {x:,.2f}")

            tabela_dados = [df_display.columns.tolist()] + df_display.values.tolist()

            tabela = Table(tabela_dados)
            tabela.setStyle(TableStyle([
                ('BACKGROUND', (0,0), (-1,0), colors.HexColor('#003366')), # Azul escuro para o cabe√ßalho
                ('TEXTCOLOR',(0,0),(-1,0),colors.whitesmoke),
                ('ALIGN',(0,0),(-1,-1),'LEFT'),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('FONTSIZE', (0,0), (-1,0), 10),
                ('BOTTOMPADDING', (0,0), (-1,0), 8),
                ('GRID', (0,0), (-1,-1), 0.5, colors.HexColor('#cccccc')),
                ('VALIGN', (0,0), (-1,-1), 'MIDDLE'),
                ('BACKGROUND', (0,1), (-1,-1), colors.HexColor('#f2f2f2')), # Cor de fundo alternada
            ]))
            elementos.append(tabela)

        # NOVO: Adiciona a data e hora de impress√£o no final do PDF com fuso hor√°rio de Bras√≠lia
        elementos.append(Spacer(1, 24))
        try:
            fuso_brasilia = pytz.timezone('America/Sao_Paulo')
            data_impressao = datetime.now(fuso_brasilia).strftime("Relat√≥rio gerado em: %d/%m/%Y √†s %H:%M:%S")
        except NameError:
            # Se pytz n√£o estiver importado (embora esteja no in√≠cio do script)
            data_impressao = datetime.now().strftime("Relat√≥rio gerado em: %d/%m/%Y √†s %H:%M:%S (Hora Local)")

        elementos.append(Paragraph(data_impressao, styles['Normal']))

        # Construir o PDF
        doc.build(elementos)

        # Bot√£o de download
        st.download_button(
            label="üì• **Baixar Relat√≥rio em PDF**",
            data=buffer.getvalue(),
            file_name=f"relatorio_armazem_{cliente or 'sem_cliente'}.pdf",
            mime="application/pdf"
        )