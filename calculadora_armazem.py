import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

# ===============================
# Configura√ß√£o da P√°gina
# ===============================
st.set_page_config(page_title="Calculadora Armaz√©m", page_icon="üè≠", layout="centered")

st.title("üè≠ Calculadora de Receitas e Custos - Armaz√©m")

# ===============================
# Informa√ß√µes b√°sicas
# ===============================
st.header("‚ÑπÔ∏è Informa√ß√µes B√°sicas")

col1, col2, col3 = st.columns(3)
with col1:
    armazem = st.selectbox("Armaz√©m", ["Espinheiros", "Garuva"])
with col2:
    cliente = st.text_input("Cliente")
with col3:
    vendedor = st.text_input("Vendedor")

# ===============================
# Detalhes da opera√ß√£o
# ===============================
st.header("üèóÔ∏è Detalhes da Opera√ß√£o")

tipo_carga = st.selectbox("Tipo de Carga", ["Batida", "Palletizada"])
qtd_containers = st.number_input("Quantidade de Containers", min_value=0, step=1)

qtd_pallets = 0
qtd_caixas_outros = 0

if tipo_carga == "Palletizada":
    qtd_pallets = st.number_input("Quantidade de Pallets por Container", min_value=0, step=1)
else: # Batida
    embalagem = st.selectbox("Distribui√ß√£o da Carga", ["Caixaria", "Sacaria", "Rolo", "Fardo", "Outros"])
    if embalagem == "Caixaria":
        qtd_caixas_outros = st.number_input("Quantidade de Caixas por Container", min_value=0, step=1)
    elif embalagem == "Sacaria":
        qtd_caixas_outros = st.number_input("Quantidade de Sacos por Container", min_value=0, step=1)
    elif embalagem == "Rolo":
        qtd_caixas_outros = st.number_input("Quantidade de Rolos por Container", min_value=0, step=1)
    elif embalagem == "Fardo":
        qtd_caixas_outros = st.number_input("Quantidade de Fardos por Container", min_value=0, step=1)
    elif embalagem == "Outros":
        qtd_caixas_outros = st.number_input("Quantidade de Outros Produtos por Container", min_value=0, step=1)

peso_por_container = st.number_input("Peso (toneladas) de 1 Container", min_value=0.0, step=0.1, format="%.2f")

produto_opcoes = [
    "01 - Animais vivos.", "02 - Carnes e miudezas, comest√≠veis.", "03 - Peixes e crust√°ceos, moluscos e outros invertebrados aqu√°ticos.", "04 - Leite e latic√≠nios; ovos de aves; mel natural; produtos comest√≠veis de origem animal, n√£o especificados nem compreendidos noutros Cap√≠tulos.", "05 - Outros produtos de origem animal, n√£o especificados nem compreendidos noutros Cap√≠tulos.", "06 - Plantas vivas e produtos de floricultura.", "07 - Produtos hort√≠colas, plantas, ra√≠zes e tub√©rculos, comest√≠veis.", "08 - Fruta; cascas de citros (citrinos) e de mel√µes.", "09 - Caf√©, ch√°, mate e especiarias.", "10 - Cereais.", "11 - Produtos da ind√∫stria de moagem; malte; amidos e f√©culas; inulina; gl√∫ten de trigo.", "12 - Sementes e frutos oleaginosos; gr√£os, sementes e frutos diversos; plantas industriais ou medicinais; palhas e forragens.", "13 - Gomas, resinas e outros sucos e extratos vegetais.", "14 - Mat√©rias para entran√ßar e outros produtos de origem vegetal, n√£o especificados nem compreendidos noutros Cap√≠tulos.", "15 - Gorduras e √≥leos animais, vegetais ou de origem microbiana e produtos da sua dissocia√ß√£o; gorduras aliment√≠cias elaboradas; ceras de origem animal ou vegetal.", "16 - Prepara√ß√µes de carne, peixes, crust√°ceos, moluscos, outros invertebrados aqu√°ticos ou de insetos.", "17 - A√ß√∫cares e produtos de confeitaria.", "18 - Cacau e suas prepara√ß√µes.", "19 - Prepara√ß√µes √† base de cereais, farinhas, amidos, f√©culas ou leite; produtos de pastelaria.", "20 - Prepara√ß√µes de produtos hort√≠colas, fruta ou de outras partes de plantas.", "21 - Prepara√ß√µes aliment√≠cias diversas.", "22 - Bebidas, l√≠quidos alco√≥licos e vinagres.", "23 - Res√≠duos e desperd√≠cios das ind√∫strias alimentares; alimentos preparados para animais.", "24 - Tabaco e seus suced√¢neos manufaturados; produtos, mesmo com nicotina, destinados √† inala√ß√£o sem combust√£o; outros produtos que contenham nicotina destinados √† absor√ß√£o da nicotina pelo corpo humano.", "25 - Sal; enxofre; terras e pedras; gesso, cal e cimento.", "26 - Min√©rios, esc√≥rias e cinzas.", "27 - Combust√≠veis minerais, √≥leos minerais e produtos da sua destila√ß√£o; mat√©rias betuminosas; ceras minerais.", "28 - Produtos qu√≠micos inorg√¢nicos; compostos inorg√¢nicos ou org√¢nicos de metais preciosos, de elementos radioativos, de metais das terras raras ou de is√≥topos.", "29 - Produtos qu√≠micos org√¢nicos.", "30 - Produtos farmac√™uticos.", "31 - Adubos (fertilizantes).", "32 - Extratos tanantes e tintoriais; taninos e seus derivados; pigmentos e outras mat√©rias corantes; tintas e vernizes; m√°stiques; tintas de escrever.", "33 - √ìleos essenciais e resinoides; produtos de perfumaria ou de toucador preparados e prepara√ß√µes cosm√©ticas.", "34 - Sab√µes, agentes org√¢nicos de superf√≠cie, prepara√ß√µes para lavagem, prepara√ß√µes lubrificantes, ceras artificiais, ceras preparadas, produtos de conserva√ß√£o e limpeza, velas e artigos semelhantes, massas ou pastas para modelar, \"ceras para odontologia\" e composi√ß√µes para odontologia √† base de gesso.", "35 - Mat√©rias albuminoides; produtos √† base de amidos ou de f√©culas modificados; colas; enzimas.", "36 - P√≥lvoras e explosivos; artigos de pirotecnia; f√≥sforos; ligas pirof√≥ricas; mat√©rias inflam√°veis.", "37 - Produtos para fotografia e cinematografia.", "38 - Produtos diversos das ind√∫strias qu√≠micas.", "39 - Pl√°stico e suas obras.", "40 - Borracha e suas obras.", "41 - Peles, exceto as peles com pelo, e couros.", "42 - Obras de couro; artigos de correeiro ou de seleiro; artigos de viagem, bolsas e artigos semelhantes; obras de tripa.", "43 - Peles com pelo e suas obras; peles com pelo artificiais.", "44 - Madeira, carv√£o vegetal e obras de madeira.", "45 - Corti√ßa e suas obras.", "46 - Obras de espartaria ou de cestaria.", "47 - Pastas de madeira ou de outras mat√©rias celul√≥sicas; papel ou cart√£o para reciclar (desperd√≠cios e res√≠duos).", "48 - Papel e cart√£o; obras de pasta de celulose, papel ou de cart√£o.", "49 - Livros, jornais, gravuras e outros produtos das ind√∫strias gr√°ficas; textos manuscritos ou datilografados, planos e plantas.", "50 - Seda.", "51 - L√£, pelos finos ou grosseiros; fios e tecidos de crina.", "52 - Algod√£o.", "53 - Outras fibras t√™xteis vegetais; fios de papel e tecidos de fios de papel.", "54 - Filamentos sint√©ticos ou artificiais; l√¢minas e formas semelhantes de mat√©rias t√™xteis sint√©ticas ou artificiais.", "55 - Fibras sint√©ticas ou artificiais, descont√≠nuas.", "56 - Pastas (ouates), feltros e falsos tecidos (tecidos n√£o tecidos); fios especiais; cord√©is, cordas e cabos; artigos de cordoaria.", "57 - Tapetes e outros revestimentos para pisos (pavimentos), de mat√©rias t√™xteis.", "58 - Tecidos especiais; tecidos tufados; rendas; tape√ßarias; passamanarias; bordados.", "59 - Tecidos impregnados, revestidos, recobertos ou estratificados; artigos para usos t√©cnicos de mat√©rias t√™xteis.", "60 - Tecidos de malha.", "61 - Vestu√°rio e seus acess√≥rios, de malha.", "62 - Vestu√°rio e seus acess√≥rios, exceto de malha.", "63 - Outros artigos t√™xteis confeccionados; sortidos; artigos de mat√©rias t√™xteis e artigos de uso semelhante, usados; trapos.", "64 - Cal√ßado, polainas e artigos semelhantes; suas partes.", "65 - Chap√©us e artigos de uso semelhante, e suas partes.", "66 - Guarda-chuvas, sombrinhas, guarda-s√≥is, bengalas, bengalas-assentos, chicotes, pingalins, e suas partes.", "67 - Penas e penugem preparadas e suas obras; flores artificiais; obras de cabelo.", "68 - Obras de pedra, gesso, cimento, amianto, mica ou de mat√©rias semelhantes.", "69 - Produtos cer√¢micos.", "70 - Vidro e suas obras.", "71 - P√©rolas naturais ou cultivadas, pedras preciosas ou semipreciosas e semelhantes, metais preciosos, metais folheados ou chapeados de metais preciosos (plaqu√™), e suas obras; bijuterias; moedas.", "72 - Ferro fundido, ferro e a√ßo.", "73 - Obras de ferro fundido, ferro ou a√ßo.", "74 - Cobre e suas obras.", "75 - N√≠quel e suas obras.", "76 - Alum√≠nio e suas obras.", "78 - Chumbo e suas obras.", "79 - Zinco e suas obras.", "80 - Estanho e suas obras.", "81 - Outros metais comuns; cermets; obras dessas mat√©rias.", "82 - Ferramentas, artigos de cutelaria e talheres, e suas partes, de metais comuns.", "83 - Obras diversas de metais comuns.", "84 - Reatores nucleares, caldeiras, m√°quinas, aparelhos e instrumentos mec√¢nicos, e suas partes.", "85 - M√°quinas, aparelhos e materiais el√©tricos, e suas partes; aparelhos de grava√ß√£o ou de reprodu√ß√£o de som, aparelhos de grava√ß√£o ou de reprodu√ß√£o de imagens e de som em televis√£o, e suas partes e acess√≥rios.", "86 - Ve√≠culos e material para vias f√©rreas ou semelhantes, e suas partes; aparelhos mec√¢nicos (incluindo os eletromec√¢nicos) de sinaliza√ß√£o para vias de comunica√ß√£o.", "87 - Ve√≠culos autom√≥veis, tratores, ciclos e outros ve√≠culos terrestres, suas partes e acess√≥rios.", "88 - Aeronaves e aparelhos espaciais, e suas partes.", "89 - Embarca√ß√µes e estruturas flutuantes.", "90 - Instrumentos e aparelhos de √≥ptica, de fotografia, de cinematografia, de medida, de controle ou de precis√£o; instrumentos e aparelhos m√©dico-cir√∫rgicos; suas partes e acess√≥rios.", "91 - Artigos de relojoaria.", "92 - Instrumentos musicais; suas partes e acess√≥rios.", "93 - Armas e muni√ß√µes; suas partes e acess√≥rios.", "94 - M√≥veis; mobili√°rio m√©dico-cir√∫rgico; colch√µes, almofadas e semelhantes; lumin√°rias e aparelhos de ilumina√ß√£o n√£o especificados nem compreendidos noutros Cap√≠tulos; an√∫ncios, cartazes ou tabuletas e placas indicadoras, luminosos e artigos semelhantes; constru√ß√µes pr√©-fabricadas.", "95 - Brinquedos, jogos, artigos para divertimento ou para esporte; suas partes e acess√≥rios.", "96 - Obras diversas.", "97 - Objetos de arte, de cole√ß√£o e antiguidades."
]
produto = st.selectbox("Tipo de Produto", produto_opcoes)
valor_carga = st.number_input("Valor da Carga (R$)", min_value=0.0, step=100.0, format="%.2f")

if tipo_carga == "Batida" and qtd_caixas_outros == 0 and qtd_containers > 0:
    st.warning("A quantidade de caixas/outros por container deve ser maior que 0 para o c√°lculo.")
elif tipo_carga == "Palletizada" and qtd_pallets == 0 and qtd_containers > 0:
    st.warning("A quantidade de pallets por container deve ser maior que 0 para o c√°lculo.")

# ===============================
# Dimens√µes da Carga
# ===============================
st.header("üì¶ Dimens√µes da Carga")

col1, col2, col3, col4 = st.columns(4)
with col1:
    comprimento = st.number_input("Comprimento (m)", min_value=0.0, step=0.1, format="%.2f")
with col2:
    largura = st.number_input("Largura (m)", min_value=0.0, step=0.1, format="%.2f")
with col3:
    altura = st.number_input("Altura (m)", min_value=0.0, step=0.1, format="%.2f")
with col4:
    peso = st.number_input("Peso (kg)", min_value=0.0, step=0.1, format="%.2f")

# ===============================
# M√©tricas Adotadas
# ===============================
st.header("üìä M√©tricas Adotadas")

col1, col2, col3 = st.columns(3)

with col1:
    dias_trabalhados = st.number_input(
        "Dias Trabalhados",
        min_value=0,
        value=22,
        step=1
    )
with col2:
    horas_trabalhadas_dia = st.number_input(
        "Horas Trabalhadas por Dia",
        min_value=0.0,
        value=8.8,
        step=0.1,
        format="%.2f"
    )
with col3:
    eficiencia = st.number_input(
        "Efici√™ncia (%)",
        min_value=0,
        max_value=100,
        value=75,
        step=1
    )

# ===============================
# Servi√ßos
# ===============================
st.header("üõ†Ô∏è Servi√ßos")

tempos_execucao = {"Batida": 120, "Palletizada": 30}
tempo_exec = tempos_execucao[tipo_carga]
st.info(f"‚è±Ô∏è Tempo estimado de execu√ß√£o por opera√ß√£o: **{tempo_exec} minutos**")

servicos_selecionados = []
custo_servicos = 0.0
discriminacao = []

# Fun√ß√µes de custo
def calcular_custo(funcao, demanda_h, headcount_h):
    taxa_ocupacao = (demanda_h / headcount_h) if headcount_h > 0 else 0
    custo_total = funcao["salario"] * taxa_ocupacao
    return custo_total, taxa_ocupacao

def adicionar_discriminacao(servico, funcao, qtd_containers, qtd_pallets, qtd_caixas, tempo_h, demanda_h, headcount_h, taxa_ocupacao, custo):
    discriminacao.append({
        "Servi√ßo": servico,
        "Fun√ß√£o": funcao,
        "Qtd Containers": qtd_containers,
        "Qtd Pallets": qtd_pallets,
        "Qtd Caixas/Outros": qtd_caixas,
        "Tempo/Container (h)": tempo_h,
        "Demanda (h)": demanda_h,
        "HeadCount (h dispon√≠vel)": headcount_h,
        "Taxa Ocupa√ß√£o": taxa_ocupacao,
        "Custo (R$)": custo
    })

headcount_val = dias_trabalhados * horas_trabalhadas_dia * (eficiencia / 100)

# Dados de sal√°rios e tempos
SALARIOS = {
    "Conferente": 4052.17,
    "Analista": 4780.41,
    "Supervisor": 6775.58,
    "Coordenador": 7774.15,
    "Assistente": 3713.31,
    "M√£o de Obra de Terceiros": 330,
    "M√°quina El√©trica": 47.6,
    "M√°quina GLP": 64.72,
    "Stretch": 6.85,
    "Etiqueta": 0.06
}

TEMPOS = {
    "Descarga": {"Conferente": 120, "Analista": 10, "Supervisor": 45},
    "TFA": {"Conferente": 120},
    "Separa√ß√£o": {"Conferente": 10},
    "Carregamento": {"Conferente": 120, "Analista": 10, "Coordenador": 45},
    "Etiquetagem": {"Assistente": 1}
}

# ===============================
# Recebimento
# ===============================
with st.expander("üì• Recebimento"):
    if st.checkbox("Descarga", key="rec_descarga"):
        servicos_selecionados.append("Descarga")
        
        # M√£o de Obra e M√°quinas
        funcoes = ["Conferente", "Analista", "Supervisor"]
        for nome_funcao in funcoes:
            tempo_min = TEMPOS["Descarga"][nome_funcao]
            tempo_h = tempo_min / 60
            demanda_h = tempo_h * qtd_containers
            
            custo, taxa_ocupacao = calcular_custo({"salario": SALARIOS[nome_funcao]}, demanda_h, headcount_val)
            custo_servicos += custo
            adicionar_discriminacao("Descarga", nome_funcao, qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_h, demanda_h, headcount_val, taxa_ocupacao, custo)
        
        # Custo de Terceiros e M√°quinas (c√°lculo por container)
        if st.checkbox("Incluir M√£o de Obra de Terceiros", key="rec_terceiros"):
            custo_terceiros = SALARIOS["M√£o de Obra de Terceiros"] * qtd_containers
            custo_servicos += custo_terceiros
            adicionar_discriminacao("Descarga", "M√£o de Obra de Terceiros", qtd_containers, qtd_pallets, qtd_caixas_outros, TEMPOS["Descarga"]["Conferente"] / 60, TEMPOS["Descarga"]["Conferente"] / 60 * qtd_containers, 0, 0, custo_terceiros)

        if st.checkbox("Incluir M√°quina El√©trica", key="rec_maquina"):
            tempo_maquina_h = TEMPOS["Descarga"]["Conferente"] / 60
            demanda_maquina_h = tempo_maquina_h * qtd_containers
            custo_maquina = SALARIOS["M√°quina El√©trica"] * demanda_maquina_h
            custo_servicos += custo_maquina
            adicionar_discriminacao("Descarga", "M√°quina El√©trica", qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_maquina_h, demanda_maquina_h, 0, 0, custo_maquina)
        
    if st.checkbox("Etiquetagem", key="rec_etiquetagem"):
        servicos_selecionados.append("Etiquetagem")
        unidades_para_etiquetagem = qtd_pallets + qtd_caixas_outros
        if unidades_para_etiquetagem > 0:
            tempo_assistente_h = TEMPOS["Etiquetagem"]["Assistente"] / 3600
            demanda_assistente_h = tempo_assistente_h * unidades_para_etiquetagem * qtd_containers
            custo_assistente, taxa_ocupacao = calcular_custo({"salario": SALARIOS["Assistente"]}, demanda_assistente_h, headcount_val)
            custo_servicos += custo_assistente
            adicionar_discriminacao("Etiquetagem", "Assistente", qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_assistente_h * unidades_para_etiquetagem, demanda_assistente_h, headcount_val, taxa_ocupacao, custo_assistente)
            
            custo_etiquetas = SALARIOS["Etiqueta"] * unidades_para_etiquetagem * qtd_containers
            custo_servicos += custo_etiquetas
            adicionar_discriminacao("Etiquetagem", "Etiqueta", qtd_containers, qtd_pallets, qtd_caixas_outros, 0, 0, 0, 0, custo_etiquetas)
            
    if st.checkbox("TFA", key="rec_tfa"):
        servicos_selecionados.append("TFA")
        tempo_conferente_h = TEMPOS["TFA"]["Conferente"] / 60
        demanda_h = tempo_conferente_h * qtd_containers
        custo, taxa_ocupacao = calcular_custo({"salario": SALARIOS["Conferente"]}, demanda_h, headcount_val)
        custo_servicos += custo
        adicionar_discriminacao("TFA", "Conferente", qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_conferente_h, demanda_h, headcount_val, taxa_ocupacao, custo)

# ===============================
# Expedi√ß√£o
# ===============================
with st.expander("üì¶ Expedi√ß√£o"):
    if st.checkbox("Separa√ß√£o", key="exp_separacao"):
        servicos_selecionados.append("Separa√ß√£o")
        unidades_demanda = qtd_caixas_outros
        tempo_conferente_h = TEMPOS["Separa√ß√£o"]["Conferente"] / 3600
        demanda_h = tempo_conferente_h * unidades_demanda * qtd_containers
        custo_conferente, taxa_ocupacao = calcular_custo({"salario": SALARIOS["Conferente"]}, demanda_h, headcount_val)
        custo_servicos += custo_conferente
        adicionar_discriminacao("Separa√ß√£o", "Conferente", qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_conferente_h * unidades_demanda, demanda_h, headcount_val, taxa_ocupacao, custo_conferente)

        if st.checkbox("Incluir M√°quina El√©trica na Separa√ß√£o", key="exp_maquina_sep"):
            custo_maquina = SALARIOS["M√°quina El√©trica"] * demanda_h
            custo_servicos += custo_maquina
            adicionar_discriminacao("Separa√ß√£o", "M√°quina El√©trica", qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_conferente_h * unidades_demanda, demanda_h, 0, 0, custo_maquina)
            
    if st.checkbox("Carregamento", key="exp_carregamento"):
        servicos_selecionados.append("Carregamento")
        funcoes = ["Conferente", "Analista", "Coordenador"]
        for nome_funcao in funcoes:
            tempo_min = TEMPOS["Carregamento"][nome_funcao]
            tempo_h = tempo_min / 60
            demanda_h = tempo_h * qtd_containers
            custo, taxa_ocupacao = calcular_custo({"salario": SALARIOS[nome_funcao]}, demanda_h, headcount_val)
            custo_servicos += custo
            adicionar_discriminacao("Carregamento", nome_funcao, qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_h, demanda_h, headcount_val, taxa_ocupacao, custo)
        
        if st.checkbox("Incluir M√£o de Obra de Terceiros", key="exp_terceiros"):
            custo_terceiros = SALARIOS["M√£o de Obra de Terceiros"] * qtd_containers
            custo_servicos += custo_terceiros
            adicionar_discriminacao("Carregamento", "M√£o de Obra de Terceiros", qtd_containers, qtd_pallets, qtd_caixas_outros, TEMPOS["Carregamento"]["Conferente"] / 60, TEMPOS["Carregamento"]["Conferente"] / 60 * qtd_containers, 0, 0, custo_terceiros)

        if st.checkbox("Incluir M√°quina GLP", key="exp_maquina_glp"):
            tempo_maquina_h = TEMPOS["Carregamento"]["Conferente"] / 60
            demanda_maquina_h = tempo_maquina_h * qtd_containers
            custo_maquina = SALARIOS["M√°quina GLP"] * demanda_maquina_h
            custo_servicos += custo_maquina
            adicionar_discriminacao("Carregamento", "M√°quina GLP", qtd_containers, qtd_pallets, qtd_caixas_outros, tempo_maquina_h, demanda_maquina_h, 0, 0, custo_maquina)

# ===============================
# Armazenagem
# ===============================
with st.expander("üè¢ Armazenagem"):
    tipo_armazenagem = st.selectbox("Tipo de Armazenagem", ["Di√°ria", "Quinzenal", "Mensal"])
    
    custo_pallet = 1.32
    if tipo_armazenagem == "Di√°ria":
        dias = st.number_input("Dias de armazenagem", min_value=1, step=1, value=1)
        if qtd_pallets > 0:
            custo_armazenagem = custo_pallet * qtd_pallets * qtd_containers * dias
            custo_servicos += custo_armazenagem
            adicionar_discriminacao("Armazenagem", "Di√°ria (por pallet)", qtd_containers, qtd_pallets, qtd_caixas_outros, 0, 0, 0, 0, custo_armazenagem)
    elif tipo_armazenagem == "Quinzenal":
        if qtd_pallets > 0:
            custo_armazenagem = custo_pallet * 15 * qtd_pallets * qtd_containers
            custo_servicos += custo_armazenagem
            adicionar_discriminacao("Armazenagem", "Quinzenal (por pallet)", qtd_containers, qtd_pallets, qtd_caixas_outros, 0, 0, 0, 0, custo_armazenagem)
    elif tipo_armazenagem == "Mensal":
        if qtd_pallets > 0:
            custo_armazenagem = custo_pallet * 30 * qtd_pallets * qtd_containers
            custo_servicos += custo_armazenagem
            adicionar_discriminacao("Armazenagem", "Mensal (por pallet)", qtd_containers, qtd_pallets, qtd_caixas_outros, 0, 0, 0, 0, custo_armazenagem)

# ===============================
# Mostrar discrimina√ß√£o
# ===============================
if discriminacao:
    st.subheader("üìã Discrimina√ß√£o de Custos")
    df_discriminacao = pd.DataFrame(discriminacao)
    df_discriminacao.index += 1
    st.dataframe(df_discriminacao.fillna(0).style.format({
        "Custo (R$)": "R$ {:,.2f}",
        "Tempo/Container (h)": "{:.4f}",
        "Demanda (h)": "{:.4f}",
        "HeadCount (h dispon√≠vel)": "{:.4f}",
        "Taxa Ocupa√ß√£o": "{:.4f}",
        "Qtd Containers": "{:.0f}",
        "Qtd Pallets": "{:.0f}",
        "Qtd Caixas/Outros": "{:.0f}"
    }))

# ===============================
# Custo total
# ===============================
st.metric("üí∞ Custo Total Servi√ßos", f"R$ {custo_servicos:,.2f}")